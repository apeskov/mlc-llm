import tvm
import tvm.meta_schedule as ms

import tvm.tir.tensor_intrin.cuda

from prepare_tune import GPTNEOX_TARGET

PROLOGUE = """
import tvm
from tvm.script import ir as I
from tvm.script import tir as T

# Autogenerated file from ms.DataBase. DO NOT MODIFY!

"""

EPILOGUE = """

def _get_dict():
    mod_decl = Module
    mod_impl = ModuleImpl
    name_func_decl = {gv.name_hint:mod_decl[gv] for gv in mod_decl.get_global_vars() if gv.name_hint}
    return {(tvm.ir.structural_hash(f), f):mod_impl[name] for name, f in name_func_decl.items()} 

DICT = _get_dict()

def lookup(func):
    for (hash_value, f_decl), f_impl in DICT.items():
        if tvm.ir.structural_hash(func) == hash_value and tvm.ir.structural_equal(
            func, f_decl
        ):
            return f_impl
    return None
"""

def _get_all_workloads(db: ms.database.Database):
    workloads = set()
    for rec in db.get_all_tuning_records():
        if rec.workload in workloads:
            continue
        workloads.add(rec.workload)

    return workloads


def main(db_path, output_file):
    """ 
    Make module with scheduled functions. 
    

    @I.ir_module
    class Module:
        @T.prim_func
        def func1(p1: T.handle, p2: T.handle):
            ...
        ...

    @I.ir_module
    class ModuleImpl:
        @T.prim_func
        def func1(p1: T.handle, p2: T.handle):
            ...
        ...

    def lookup(func):
        ...
    """
    db = ms.database.JSONDatabase(work_dir=db_path, allow_missing=False)

    decls, impls = {}, {}

    for i, wkl in enumerate(_get_all_workloads(db)):
        decl_f = wkl.mod["main"]
        impl_f = db.query(wkl.mod, GPTNEOX_TARGET, kind="ir_module")["main"]
        
        # remove global_symbol attr
        decl_f = decl_f.without_attr("global_symbol")
        impl_f = impl_f.without_attr("global_symbol")

        decls[f"func{i}"] = decl_f
        impls[f"func{i}"] = impl_f

    mod_decl = tvm.ir.IRModule(decls)
    mod_impl = tvm.ir.IRModule(impls)
    
    # save to script file
    with open(output_file, mode="w") as of:
        print(PROLOGUE, file=of)
        print(mod_decl.script(name="Module"), file=of)
        print(mod_impl.script(name="ModuleImpl"), file=of)
        print(EPILOGUE, file=of)


if __name__ == "__main__":
    main("__tmp/tune_static", "../../mlc_llm/dispatch/gpt_neox/dolly_v2_12b_q4fp16.py")
